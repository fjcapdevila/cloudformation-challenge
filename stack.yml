---

AWSTemplateFormatVersion: '2010-09-09'
Description: A Python/Flask/MongoDB stack

Parameters:

  InstanceType:
    Description: Instance type of virtual server
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium

  InstanceCount:
    Description: Number of instances to launch (1-4)
    Type: String
    Default: '2'
    # LetÂ´s add a basic validation
    AllowedValues: ['1', '2', '3', '4']

  VPCParameter:
    Description: VPC to launch instances into
    Type: AWS::EC2::VPC::Id

  SubnetParameter:
    Description: Subnet to launch instances into
    Type: AWS::EC2::Subnet::Id

  KeyName:
    Description: Key Pair name
    Type: AWS::EC2::KeyPair::KeyName

# Mappings for Official Ubuntu Bionic images
Mappings:
  RegionMap:
    us-east-1:
      bionic: ami-0d2505740b82f7948
    us-west-1:
      bionic: ami-09c5eca75eed8245a
    ap-northeast-1:
      bionic: ami-0fd02119f1653c976
    sa-east-1:
      bionic: ami-04fb8967affdf73b6
    ap-southeast-1:
      bionic: ami-0efb24bbbf33a2fd7
    ca-central-1:
      bionic: ami-0388b9f812caf5c3f
    ap-south-1:
      bionic: ami-01187fe59c07cd350
    eu-central-1:
      bionic: ami-080d06f90eb293a27
    eu-west-1:
      bionic: ami-02790d1ebf3b5181d
    cn-north-1:
      bionic: ami-05596fb52c3802012
    cn-northwest-1:
      bionic: ami-03f7db8b059795736
    us-gov-east-1:
      bionic: ami-825fb8f3
    us-gov-west-1:
      bionic: ami-b44b2fd5
    ap-northeast-2:
      bionic: ami-096560874cb404a4d
    ap-southeast-2:
      bionic: ami-03932cb7d3a1a69af
    us-west-2:
      bionic: ami-0f05ad41860678734
    us-east-2:
      bionic: ami-0cf8cc36b8c81c6de
    eu-west-2:
      bionic: ami-06328f1e652dc7605
    ap-northeast-3:
      bionic: ami-064d6dc91cdb4daa8
    eu-west-3:
      bionic: ami-0697abcfa8916e673

Resources:
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: elb-sg
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: VPCParameter

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ec2-sg
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - FromPort: 5000
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ELBSecurityGroup
          ToPort: 5000
      VpcId: !Ref VPCParameter

  MongoSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ec2-sg
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - FromPort: 27017
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          ToPort: 27017
      VpcId: !Ref VPCParameter

  ELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      CrossZone: true
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '10'
        Target: HTTP:5000/
        Timeout: '5'
        UnhealthyThreshold: '2'
      Listeners:
        - InstancePort: '5000'
          InstanceProtocol: HTTP
          LoadBalancerPort: '80'
          Protocol: HTTP
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref SubnetParameter

  App:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', bionic]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !Ref SubnetParameter
      Tags:
        - Key: Name
          Value: My App
      UserData:
        'Fn::Base64': !Sub |
            #!/bin/bash -ex
            apt update
            apt install -y supervisor python3 git python3-venv
            adduser --home /opt/myapp myapp --disabled-login --disabled-password --gecos ""
            sudo -u myapp python3 -m venv /opt/myapp/venv
            sudo -u myapp /opt/myapp/venv/bin/pip install flask
            sudo -u myapp /opt/myapp/venv/bin/pip install bson
            sudo -u myapp /opt/myapp/venv/bin/pip install pymongo
            sudo -u myapp git clone https://github.com/sarathlalsaseendran/FlaskWithMongoDB /opt/myapp/repo
            sed -i -e 's/127.0.0.1:27017/${MongoDB.PrivateIp}:27017/g' /opt/myapp/repo/app.py
            sed -i -e 's/app.run()/app.run(host="0.0.0.0", port=5000)/g' /opt/myapp/repo/app.py
            cat <<EOF >> /etc/supervisor/conf.d/myapp.conf
            [program:myapp]
            directory=/opt/myapp/repo
            user=myapp
            command=/opt/myapp/venv/bin/python app.py
            autostart=true
            autorestart=true
            EOF
            systemctl restart supervisor
            /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup

  MongoDB:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', bionic]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref MongoSecurityGroup
          SubnetId: !Ref SubnetParameter
      Tags:
        - Key: Name
          Value: MongoDB
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse" > /etc/apt/sources.list.d/mongodb-org-3.6.list
          apt update
          apt install -y mongodb-org
          sed -i -e 's/127.0.0.1/0.0.0.0/g' /etc/mongod.conf
          sudo systemctl enable mongod.service
          sudo systemctl restart mongod.service

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', bionic]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref EC2SecurityGroup
      UserData:
        'Fn::Base64': !Sub |
            #!/bin/bash -ex
            export DEBIAN_FRONTEND=noninteractive
            # Update repositories list and upgrade packages
            apt update && apt upgrade -y
            # Install required packages
            apt install -y supervisor python3 git python3-venv python-pip
            # Install Cloudformation scripts
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            # Create a user for the app
            adduser --home /opt/myapp myapp --disabled-login --disabled-password --gecos ""
            sudo -u myapp python3 -m venv /opt/myapp/venv
            sudo -u myapp /opt/myapp/venv/bin/pip install flask
            sudo -u myapp /opt/myapp/venv/bin/pip install bson
            sudo -u myapp /opt/myapp/venv/bin/pip install pymongo
            sudo -u myapp git clone https://github.com/sarathlalsaseendran/FlaskWithMongoDB /opt/myapp/repo
            sed -i -e 's/127.0.0.1:27017/${MongoDB.PrivateIp}:27017/g' /opt/myapp/repo/app.py
            sed -i -e 's/app.run()/app.run(host="0.0.0.0", port=5000)/g' /opt/myapp/repo/app.py
            cat <<EOF >> /etc/supervisor/conf.d/myapp.conf
            [program:myapp]
            directory=/opt/myapp/repo
            user=myapp
            command=/opt/myapp/venv/bin/python app.py
            autostart=true
            autorestart=true
            EOF
            # Restart supervisor service to force reload its configuration
            systemctl restart supervisor
            # Notify AutoScalingGroup
            /usr/local/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: !Ref InstanceCount
      LaunchConfigurationName: !Ref LaunchConfiguration
      VPCZoneIdentifier:
        - !Ref SubnetParameter
      LoadBalancerNames:
        - !Ref ELB
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true

Outputs:

  MongoDB:
    Value: !Sub ubuntu@${MongoDB.PublicIp}
    Description: SSH

  LoadBalancer:
    Value: !Sub http://${ELB.DNSName}/
    Description: Load Balancer URL
